[{"path":"/articles/IntroVignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"wonderapi","text":"package makes easier use CDC Wonder API. employing hidden default query lists lookup tables, allowing users focus variables ’re interested obtaining, write queries using human readable names rather numeric codes. getData() converts user’s parameter requests codes adds codes default query list calls WONDER API obtain query results processes results returns tidy data frame","code":""},{"path":"/articles/IntroVignette.html","id":"limitations-of-the-cdc-wonder-api","dir":"Articles","previous_headings":"","what":"Limitations of the CDC WONDER API","title":"wonderapi","text":"Note queries mortality births statistics National Vital Statistics System limit group results location field, Region, Division, State County, Urbanization (urbanization categories map specific geographic counties). See: https://wonder.cdc.gov/wonder/help/WONDER-API.html information.","code":""},{"path":"/articles/IntroVignette.html","id":"example","dir":"Articles","previous_headings":"Limitations of the CDC WONDER API","what":"Example","title":"wonderapi","text":"show_databases() displays available databases name code: databases added future. best way become familiar CDC Wonder API options use web interface: https://wonder.cdc.gov, options available API nearly identical. greatest difference location variables available API.","code":"mylist <- list(list(\"And By\", \"Gender\")) mydata0 <- getData(\"Detailed Mortality\", mylist) mydata0 %>% head() %>% kable() wonderapi::show_databases() ## # A tibble: 7 × 2 ##   label                               name  ##   <chr>                               <chr> ## 1 Natality for 1995 - 2002            D10   ## 2 Natality for 2003 - 2006            D27   ## 3 Natality for 2007 - 2020            D66   ## 4 Natality for 2016 - 2020 (expanded) D149  ## 5 Detailed Mortality                  D76   ## 6 Provisional Multiple Cause of Death D176  ## 7 Heat Wave Days                      D104"},{"path":"/articles/IntroVignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"wonderapi","text":"package CRAN. can installed Github devtools package: (vignettes important component package codebooks stored vignettes, sure include build_vignettes = TRUE.)","code":"devtools::install_github(\"socdataR/wonderapi\", build_vignettes = TRUE)"},{"path":"/articles/IntroVignette.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"wonderapi","text":"Queries composed parameter name-value pairs. Setting query without assistance complex query must submitted .xml file long list required parameters, (Example 1) (Example 2). point package prevent create requests form. code converting R lists xml making actual query borrowed wondr package. value package “pre” “post” stages query, , processes setting query tidying results.","code":""},{"path":"/articles/IntroVignette.html","id":"codebooks","dir":"Articles","previous_headings":"Getting started","what":"Codebooks","title":"wonderapi","text":"Codebooks provided package vignettes allow user conveniently look names values available parameters dataset. may accessed quickly typing: console, searching “codebook” Help window. codebooks important contribution package provided CDC. generated automatically script, scrapes CDC Wonder web interface form, displays parameter names values human readable form. benefit method ability quickly produce update codebook vignettes closely follow web interface, parameters appearing order. also means, however, codebooks contain information typical user needs submit query. users need Group variables (codes beginning “B_”), Measures (codes beginning “M_”), Limiting Variables (codes beginning “V_”). Although parameter names long /awkward, sake consistency, follow CDC names exactly. exception content appears parentheses dropped. example, “Fertility Rate” can substituted “M_5”, “Fertility Rate (Census Region, Census Division, HHS Region, State, County, Year, Age Mother, Race) .","code":"> ??codebook"},{"path":"/articles/IntroVignette.html","id":"default-query-lists-and-requests","dir":"Articles","previous_headings":"Getting started","what":"Default query lists and requests","title":"wonderapi","text":"facilitate process designing query list, package relies default query lists. default query set request single Group Results parameter, generally set \"Year\". set request Measures listed default Measures web interface (.e. Births Births dataset; Deaths, Population Crude Rate Detailed Mortality dataset.) see default settings, perform query request without specifying querylist: default lists prepared based CDC examples, make claim error free. suggestions improving , please make pull request Github send email Joyce Robbins. default lists available .","code":"natdata <- getData(\"Natality for 2007 - 2020\") natdata %>% head() %>% kable() dmdata <- getData(\"Detailed Mortality\") dmdata %>% head() %>% kable()"},{"path":"/articles/IntroVignette.html","id":"creating-customized-queries","dir":"Articles","previous_headings":"","what":"Creating customized queries","title":"wonderapi","text":"different types parameters. critical Group Results Measures. Group Results parameters serve keys grouping data; maximum number Group Results parameters five. Limiting Variables may also used constrain results behind scenes. make changes default list, first create list lists, wherein nested list name-value pair. example, following changes first (currently ) “Group Results ” variable Weekday: set slightly different depending parameter type, details setting name-value pairs parameter types provided .","code":"mylist <- list(list(\"Group Results By\", \"Weekday\")) mydata <- getData(\"Detailed Mortality\", mylist) mydata %>% head() %>% kable()"},{"path":"/articles/IntroVignette.html","id":"group-by-variables","dir":"Articles","previous_headings":"Creating customized queries","what":"Group By variables","title":"wonderapi","text":"dataset allows fixed number (5 fewer) Group variables, codes \"B_1\", \"B_2\", \"B_3\", etc. \"Group Results\" may substituted \"B_1\" \"\" \"B_2\". \"” may , however, substituted \"B_3\" avoid ambiguity (may change future.) Values – case, Group variables – may specified code human readable name. following, thus, equivalent: See appropriate codebook Group options.","code":"## not run mylist <- list(list(\"B_1\", \"D66.V2\")) mylist <- list(list(\"Group Results By\", \"Race\")) mylist <- list(list(\"B_1\", \"Race\")) mylist <- list(list(\"Group Results By\", \"D66.V2\"))"},{"path":"/articles/IntroVignette.html","id":"measures","dir":"Articles","previous_headings":"Creating customized queries","what":"Measures","title":"wonderapi","text":"Measures need values; sufficient specify name :","code":"mylist <- list(list(\"Group Results By\", \"Marital Status\"),                list(\"And By\", \"Year\"),                list(\"Average Age of Mother\", \"\")) mydata2 <- getData(\"Natality for 2007 - 2020\", mylist) mydata2 %>% head() %>% kable()"},{"path":"/articles/IntroVignette.html","id":"limiting-variables","dir":"Articles","previous_headings":"Creating customized queries","what":"Limiting variables","title":"wonderapi","text":"Queries can constrained parameters limit results background. example, ’re interested February births, may choose limit results February follows, rather grouping Month: Note values Limiting Variables must entered codes; case “2” rather “February.” hope add capability human readable values future.","code":"mylist <- list(list(\"Month\", \"2\")) getData(\"D66\", mylist) ## # A tibble: 14 × 2 ##     Year Births ##    <dbl>  <dbl> ##  1  2007 326891 ##  2  2008 338521 ##  3  2009 316641 ##  4  2010 301994 ##  5  2011 297961 ##  6  2012 304505 ##  7  2013 291748 ##  8  2014 298404 ##  9  2015 298058 ## 10  2016 306015 ## 11  2017 289054 ## 12  2018 284250 ## 13  2019 279963 ## 14  2020 282654"},{"path":"/articles/IntroVignette.html","id":"plotting-query-results","dir":"Articles","previous_headings":"Creating customized queries","what":"Plotting query results","title":"wonderapi","text":"returning tidy data frame, query results ready plotted without additional data manipulation:","code":"ggplot(mydata2, aes(x = Year, y = Births, color = `Marital Status`)) +     geom_line() + ggtitle(\"Births by Marital Status\") ggplot(mydata2, aes(x = Year, y = `Average Age of Mother`,                    color = `Marital Status`)) + geom_line() +     geom_point() + ylab(\"age (in years)\") +      ggtitle(\"Average Age of Mother\") mydata2 <- mydata2 %>%      select(-`Average Age of Mother`) %>%      spread(key = `Marital Status`, value = `Births`) %>%      mutate(Total = Married + Unmarried) ggplot(mydata2, aes(x = Year, y = Unmarried / Total)) + geom_line() +     geom_point() + ggtitle(\"Births to Unmarried Mothers\") +     ylab(\"Percent of Total Births\")"},{"path":"/articles/IntroVignette.html","id":"combining-results-from-multiple-datasets","dir":"Articles","previous_headings":"Creating customized queries","what":"Combining results from multiple datasets","title":"wonderapi","text":"datasets, Births, divided multiple databases time period. wonderapi makes easy combine data one data frame. (Care needs taken variables identical . example, 1995 - 2002 dataset measure options; returns number births. find ’s available, see codebooks (>??codebook) crosscheck CDC Wonder API web interface.)","code":"births <- rbind(getData(\"Natality for 1995 - 2002\"),                 getData(\"Natality for 2003 - 2006\"),                 getData(\"Natality for 2007 - 2020\")) ggplot(births, aes(Year, Births)) + geom_line() +      ggtitle(\"U.S. Births by Year, 1995 - 2020\")"},{"path":"/articles/IntroVignette.html","id":"errors","dir":"Articles","previous_headings":"Creating customized queries","what":"Errors","title":"wonderapi","text":"main source errors improper query requests. wonderapi limited ability catch problems query request made. checks list parameter names reject name-value pair name, either code human readable form, recognized. (Checking value problems added future.) example unrecognized parameter name: Errors due constraints CDC Wonder API difficult catch since many quirky rules currently beyond scope package check . following, example, appears reasonable request, results error: case, best approach visit CDC Wonder API web interface try query. goes well, receive detailed information went wrong: learn can’t include “Education” request “Birth Rate” measure. try “Bridged Race” instead “Education”, works:","code":"mydata3 <- getData(\"Detailed Mortality\",          list(list(\"Suspect\", \"Mrs. Peacock\"))) ## Ignoring: \"Suspect\",...(not recognized) mydata3 %>% head() %>% kable() mylist <- list(list(\"And By\", \"Education\"),                 list(\"Birth Rate\", \"\")) mydata4 <- getData(\"Natality for 2007 - 2020\", mylist) ## No encoding supplied: defaulting to UTF-8. ## Message from query: ## Any by-variables picked from {0} need to appear in the order listed, and other by-variables can't come between them. ## Error in getData(\"Natality for 2007 - 2020\", mylist): Internal Server Error (HTTP 500). mylist <- list(list(\"And By\", \"Mother's Bridged Race\"),                 list(\"Birth Rate\", \"\")) mydata5 <- getData(\"Natality for 2007 - 2020\", mylist) mydata5 %>% head() %>% kable()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joyce Robbins. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Robbins J (2022). wonderapi: User Friendly Access CDC Wonder API. R package version 0.0.0.9000, https://github.com/socdataR/wonderapi.","code":"@Manual{,   title = {wonderapi: User Friendly Access to CDC Wonder API},   author = {Joyce Robbins},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/socdataR/wonderapi}, }"},{"path":"/index.html","id":"wonderapi","dir":"","previous_headings":"","what":"User Friendly Access to CDC Wonder API","title":"User Friendly Access to CDC Wonder API","text":"Joyce Robbins 2022-03-24 Example Installation Codebooks Default query lists requests Group variables Measures Limiting variables Plotting query results Combining results multiple datasets Errors","code":"library(tidyverse) library(wonderapi)"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"User Friendly Access to CDC Wonder API","text":"package makes easier use CDC Wonder API. employing hidden default query lists lookup tables, allowing users focus variables ’re interested obtaining, write queries using human readable names rather numeric codes. getData() converts user’s parameter requests codes adds codes default query list calls WONDER API obtain query results processes results returns tidy data frame","code":""},{"path":"/index.html","id":"limitations-of-the-cdc-wonder-api","dir":"","previous_headings":"","what":"Limitations of the CDC WONDER API","title":"User Friendly Access to CDC Wonder API","text":"Note queries mortality births statistics National Vital Statistics System limit group results location field, Region, Division, State County, Urbanization (urbanization categories map specific geographic counties). See: https://wonder.cdc.gov/wonder/help/WONDER-API.html information.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"Limitations of the CDC WONDER API","what":"Example","title":"User Friendly Access to CDC Wonder API","text":"show_databases() displays available databases name code: databases added future. best way become familiar CDC Wonder API options use web interface: https://wonder.cdc.gov, options available API nearly identical. greatest difference location variables available API.","code":"mylist <- list(list(\"And By\", \"Gender\")) mydata0 <- getData(\"Detailed Mortality\", mylist) mydata0 %>% head() ## # A tibble: 6 × 5 ##   Year  Gender  Deaths Population `Crude Rate` ##   <chr> <chr>    <dbl>      <dbl>        <dbl> ## 1 1999  Female 1215860  142237295         855. ## 2 1999  Male   1175183  136802873         859  ## 3 2000  Female 1225706  143368343         855. ## 4 2000  Male   1177289  138053563         853. ## 5 2001  Female 1232913  145077463         850. ## 6 2001  Male   1183090  139891492         846. wonderapi::show_databases() ## # A tibble: 7 × 2 ##   label                               name  ##   <chr>                               <chr> ## 1 Natality for 1995 - 2002            D10   ## 2 Natality for 2003 - 2006            D27   ## 3 Natality for 2007 - 2020            D66   ## 4 Natality for 2016 - 2020 (expanded) D149  ## 5 Detailed Mortality                  D76   ## 6 Provisional Multiple Cause of Death D176  ## 7 Heat Wave Days                      D104"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"User Friendly Access to CDC Wonder API","text":"package CRAN. can installed Github devtools package: (vignettes important component package codebooks stored vignettes, sure include build_vignettes = TRUE.)","code":"devtools::install_github(\"socdataR/wonderapi\", build_vignettes = TRUE)"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"User Friendly Access to CDC Wonder API","text":"Queries composed parameter name-value pairs. Setting query without assistance complex query must submitted .xml file long list required parameters, (Example 1) (Example 2). point package prevent create requests form. code converting R lists xml making actual query borrowed wondr package. value package “pre” “post” stages query, , processes setting query tidying results.","code":""},{"path":"/index.html","id":"codebooks","dir":"","previous_headings":"Getting started","what":"Codebooks","title":"User Friendly Access to CDC Wonder API","text":"Codebooks provided package vignettes allow user conveniently look names values available parameters dataset. may accessed quickly typing: console, searching “codebook” Help window. codebooks important contribution package provided CDC. generated automatically script, scrapes CDC Wonder web interface form, displays parameter names values human readable form. benefit method ability quickly produce update codebook vignettes closely follow web interface, parameters appearing order. also means, however, codebooks contain information typical user needs submit query. users need Group variables (codes beginning “B_”), Measures (codes beginning “M_”), Limiting Variables (codes beginning “V_”). Although parameter names long /awkward, sake consistency, follow CDC names exactly. exception content appears parentheses dropped. example, “Fertility Rate” can substituted “M_5”, “Fertility Rate (Census Region, Census Division, HHS Region, State, County, Year, Age Mother, Race) .","code":"> ??codebook"},{"path":"/index.html","id":"default-query-lists-and-requests","dir":"","previous_headings":"Getting started","what":"Default query lists and requests","title":"User Friendly Access to CDC Wonder API","text":"facilitate process designing query list, package relies default query lists. default query set request single Group Results parameter, generally set \"Year\". set request Measures listed default Measures web interface (.e. Births Births dataset; Deaths, Population Crude Rate Detailed Mortality dataset.) see default settings, perform query request without specifying querylist: default lists prepared based CDC examples, make claim error free. suggestions improving , please make pull request Github send email Joyce Robbins. default lists available .","code":"natdata <- getData(\"Natality for 2007 - 2020\") natdata %>% head() ## # A tibble: 6 × 2 ##    Year  Births ##   <dbl>   <dbl> ## 1  2007 4316233 ## 2  2008 4247694 ## 3  2009 4130665 ## 4  2010 3999386 ## 5  2011 3953590 ## 6  2012 3952841 dmdata <- getData(\"Detailed Mortality\") dmdata %>% head() ## # A tibble: 6 × 4 ##   Year   Deaths Population `Crude Rate` ##   <chr>   <dbl>      <dbl>        <dbl> ## 1 1999  2391043  279040168         857. ## 2 2000  2402995  281421906         854. ## 3 2001  2416003  284968955         848. ## 4 2002  2443030  287625193         849. ## 5 2003  2447946  290107933         844. ## 6 2004  2397269  292805298         819."},{"path":"/index.html","id":"creating-customized-queries","dir":"","previous_headings":"","what":"Creating customized queries","title":"User Friendly Access to CDC Wonder API","text":"different types parameters. critical Group Results Measures. Group Results parameters serve keys grouping data; maximum number Group Results parameters five. Limiting Variables may also used constrain results behind scenes. make changes default list, first create list lists, wherein nested list name-value pair. example, following changes first (currently ) “Group Results ” variable Weekday: set slightly different depending parameter type, details setting name-value pairs parameter types provided .","code":"mylist <- list(list(\"Group Results By\", \"Weekday\")) mydata <- getData(\"Detailed Mortality\", mylist) mydata %>% head() ## # A tibble: 6 × 4 ##   Weekday    Deaths Population     `Crude Rate`   ##   <chr>       <dbl> <chr>          <chr>          ## 1 Sunday    8049406 Not Applicable Not Applicable ## 2 Monday    8120828 Not Applicable Not Applicable ## 3 Tuesday   8066322 Not Applicable Not Applicable ## 4 Wednesday 8074854 Not Applicable Not Applicable ## 5 Thursday  8087969 Not Applicable Not Applicable ## 6 Friday    8197715 Not Applicable Not Applicable"},{"path":"/index.html","id":"group-by-variables","dir":"","previous_headings":"Creating customized queries","what":"Group By variables","title":"User Friendly Access to CDC Wonder API","text":"dataset allows fixed number (5 fewer) Group variables, codes \"B_1\", \"B_2\", \"B_3\", etc. \"Group Results\" may substituted \"B_1\" \"\" \"B_2\". \"” may , however, substituted \"B_3\" avoid ambiguity (may change future.) Values – case, Group variables – may specified code human readable name. following, thus, equivalent: See appropriate codebook Group options.","code":"## not run mylist <- list(list(\"B_1\", \"D66.V2\")) mylist <- list(list(\"Group Results By\", \"Race\")) mylist <- list(list(\"B_1\", \"Race\")) mylist <- list(list(\"Group Results By\", \"D66.V2\"))"},{"path":"/index.html","id":"measures","dir":"","previous_headings":"Creating customized queries","what":"Measures","title":"User Friendly Access to CDC Wonder API","text":"Measures need values; sufficient specify name :","code":"mylist <- list(list(\"Group Results By\", \"Marital Status\"),                list(\"And By\", \"Year\"),                list(\"Average Age of Mother\", \"\")) mydata2 <- getData(\"Natality for 2007 - 2020\", mylist) mydata2 %>% head() ## # A tibble: 6 × 4 ##   `Marital Status`  Year  Births `Average Age of Mother` ##   <chr>            <dbl>   <dbl>                   <dbl> ## 1 Married           2007 2601186                    29.5 ## 2 Married           2008 2521128                    29.6 ## 3 Married           2009 2437007                    29.7 ## 4 Married           2010 2365915                    29.8 ## 5 Married           2011 2345817                    29.9 ## 6 Married           2012 2343222                    30.0"},{"path":"/index.html","id":"limiting-variables","dir":"","previous_headings":"Creating customized queries","what":"Limiting variables","title":"User Friendly Access to CDC Wonder API","text":"Queries can constrained parameters limit results background. example, ’re interested February births, may choose limit results February follows, rather grouping Month: Note values Limiting Variables must entered codes; case “2” rather “February.” hope add capability human readable values future.","code":"mylist <- list(list(\"Month\", \"2\")) getData(\"D66\", mylist) ## # A tibble: 14 × 2 ##     Year Births ##    <dbl>  <dbl> ##  1  2007 326891 ##  2  2008 338521 ##  3  2009 316641 ##  4  2010 301994 ##  5  2011 297961 ##  6  2012 304505 ##  7  2013 291748 ##  8  2014 298404 ##  9  2015 298058 ## 10  2016 306015 ## 11  2017 289054 ## 12  2018 284250 ## 13  2019 279963 ## 14  2020 282654"},{"path":"/index.html","id":"plotting-query-results","dir":"","previous_headings":"Creating customized queries","what":"Plotting query results","title":"User Friendly Access to CDC Wonder API","text":"returning tidy data frame, query results ready plotted without additional data manipulation:","code":"ggplot(mydata2, aes(x = Year, y = Births, color = `Marital Status`)) +     geom_line() + ggtitle(\"Births by Marital Status\") ggplot(mydata2, aes(x = Year, y = `Average Age of Mother`,                    color = `Marital Status`)) + geom_line() +     geom_point() + ylab(\"age (in years)\") +      ggtitle(\"Average Age of Mother\") mydata2 <- mydata2 %>%      select(-`Average Age of Mother`) %>%      spread(key = `Marital Status`, value = `Births`) %>%      mutate(Total = Married + Unmarried) ggplot(mydata2, aes(x = Year, y = Unmarried / Total)) + geom_line() +     geom_point() + ggtitle(\"Births to Unmarried Mothers\") +     ylab(\"Percent of Total Births\")"},{"path":"/index.html","id":"combining-results-from-multiple-datasets","dir":"","previous_headings":"Creating customized queries","what":"Combining results from multiple datasets","title":"User Friendly Access to CDC Wonder API","text":"datasets, Births, divided multiple databases time period. wonderapi makes easy combine data one data frame. (Care needs taken variables identical . example, 1995 - 2002 dataset measure options; returns number births. find ’s available, see codebooks (>??codebook) crosscheck CDC Wonder API web interface.)","code":"births <- rbind(getData(\"Natality for 1995 - 2002\"),                 getData(\"Natality for 2003 - 2006\"),                 getData(\"Natality for 2007 - 2020\")) ggplot(births, aes(Year, Births)) + geom_line() +      ggtitle(\"U.S. Births by Year, 1995 - 2020\")"},{"path":"/index.html","id":"errors","dir":"","previous_headings":"Creating customized queries","what":"Errors","title":"User Friendly Access to CDC Wonder API","text":"main source errors improper query requests. wonderapi limited ability catch problems query request made. checks list parameter names reject name-value pair name, either code human readable form, recognized. (Checking value problems added future.) example unrecognized parameter name: Errors due constraints CDC Wonder API difficult catch since many quirky rules currently beyond scope package check . following, example, appears reasonable request, results error: case, best approach visit CDC Wonder API web interface try query. goes well, receive detailed information went wrong: learn can’t include “Education” request “Birth Rate” measure. try “Bridged Race” instead “Education”, works:","code":"mydata3 <- getData(\"Detailed Mortality\",          list(list(\"Suspect\", \"Mrs. Peacock\"))) ## Ignoring: \"Suspect\",...(not recognized) mydata3 %>% head() ## # A tibble: 6 × 4 ##   Year   Deaths Population `Crude Rate` ##   <chr>   <dbl>      <dbl>        <dbl> ## 1 1999  2391043  279040168         857. ## 2 2000  2402995  281421906         854. ## 3 2001  2416003  284968955         848. ## 4 2002  2443030  287625193         849. ## 5 2003  2447946  290107933         844. ## 6 2004  2397269  292805298         819. mylist <- list(list(\"And By\", \"Education\"),                 list(\"Birth Rate\", \"\")) mydata4 <- getData(\"Natality for 2007 - 2020\", mylist) ## No encoding supplied: defaulting to UTF-8.  ## Message from query: ## Any by-variables picked from {0} need to appear in the order listed, and other by-variables can't come between them.  ## Error in getData(\"Natality for 2007 - 2020\", mylist): Internal Server Error (HTTP 500). mylist <- list(list(\"And By\", \"Mother's Bridged Race\"),                 list(\"Birth Rate\", \"\")) mydata5 <- getData(\"Natality for 2007 - 2020\", mylist) mydata5 %>% head() ## # A tibble: 6 × 5 ##    Year `Mother's Bridged Race`           Births `Total Population` `Birth Rate` ##   <dbl> <chr>                              <dbl> <chr>              <chr>        ## 1  2007 American Indian or Alaska Native   49443 3,829,898          12.91        ## 2  2007 Asian or Pacific Islander         254488 15,559,373         16.36        ## 3  2007 Black or African American         675676 40,451,108         16.70        ## 4  2007 White                            3336626 241,390,828        13.82        ## 5  2008 American Indian or Alaska Native   49537 3,983,929          12.43        ## 6  2008 Asian or Pacific Islander         253185 16,094,699         15.73"},{"path":"/reference/dbnamelookup.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC Wonder dataset lookup table — dbnamelookup","title":"CDC Wonder dataset lookup table — dbnamelookup","text":"contains codes, dataset names, url endings, \"Agree\" submit phrases (external needed create internal data files)","code":""},{"path":"/reference/dbnamelookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC Wonder dataset lookup table — dbnamelookup","text":"","code":"dbnamelookup"},{"path":"/reference/dbnamelookup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CDC Wonder dataset lookup table — dbnamelookup","text":"data frame 4 columns, 2 rows (increase data sets added list: https://wonder.cdc.gov/ dblabel friendly dataset name, list: https://wonder.cdc.gov/ dbname dataset web page name, found clicking one datasets listed -- https://wonder.cdc.gov/ -- looking resulting url. dbcode dataset code, found clicking \"Agree\" page, looking resulting url. dbagree dataset \"agree\" phrase, found looking source code page \"Agree\" button","code":""},{"path":"/reference/dbnamelookup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CDC Wonder dataset lookup table — dbnamelookup","text":"data-raw/create_data_files.R","code":""},{"path":"/reference/getBirths.html","id":null,"dir":"Reference","previous_headings":"","what":"Request birth data from the CDC Wonder API — getBirths","title":"Request birth data from the CDC Wonder API — getBirths","text":"wrapper `getData()` calls CDC Wonder API returns tidy data frame (tibble)","code":""},{"path":"/reference/getBirths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request birth data from the CDC Wonder API — getBirths","text":"","code":"getBirths(...)"},{"path":"/reference/getBirths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request birth data from the CDC Wonder API — getBirths","text":"... list words indicate group_by variables desired query. Words interpreted according first letter (case-sensitive): = \"Age Mother Year\" B = \"Birth Weight 100 gram   increments\" D = \"Delivery Method\" E = \"Education\" G = \"Gender\" H = \"Hispanic Origin\" M = \"Month\" O = \"Live Birth Order\" P = \"Birthplace\" R = \"Race\" S = \"Marital Status\" P = \"Month Prenatal Care Began\" W = \"Weekday\"","code":""},{"path":"/reference/getBirths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request birth data from the CDC Wonder API — getBirths","text":"","code":"mydata <- getBirths(age, educcation, wieght, gender)  mydata #> [[1]] #> [[1]][[1]] #> [1] \"B_1\" #>  #> [[1]][[2]] #> [1] \"Age of Mother Year\" #>  #>  #> [[2]] #> [[2]][[1]] #> [1] \"B_2\" #>  #> [[2]][[2]] #> [1] \"Education\" #>  #>  #> [[3]] #> [[3]][[1]] #> [1] \"B_3\" #>  #> [[3]][[2]] #> [1] \"Weekday\" #>  #>  #> [[4]] #> [[4]][[1]] #> [1] \"B_4\" #>  #> [[4]][[2]] #> [1] \"Gender\" #>  #>"},{"path":"/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from the CDC Wonder API — getData","title":"Request data from the CDC Wonder API — getData","text":"calls CDC Wonder API returns tidy data frame (tibble)","code":""},{"path":"/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from the CDC Wonder API — getData","text":"","code":"getData(   db = \"D66\",   querylist = NULL,   add = TRUE,   save = FALSE,   fn = \"query.xml\",   agree = TRUE )"},{"path":"/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from the CDC Wonder API — getData","text":"db Indicate database, either label, name, code.  see complete list available, use `show_databases()` querylist query list supplied must list lists names values. default combined default query list database. supply full list bypass default query list, set add TRUE. See instructions create list. add TRUE (default) querylist combined default query list. Set FALSE use querylist standalone list query parameters. save TRUE query list saved, defaults FALSE fn filename saved query list, defaults query.xml. agree Must set TRUE agree CDC terms (default TRUE). see terms particular dataset click dataset : https://wonder.cdc.gov. sample","code":""},{"path":"/reference/getData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Request data from the CDC Wonder API — getData","text":"Queries mortality births statistics National Vital Statistics System limit group results location field, Region, Division, State County, Urbanization (urbanization categories map specific geographic counties). example, D76 online database Detailed Mortality 1999-2013, location fields D76.V9, D76.V10 D76.V27, urbanization fields D76.V11 D76.V19. 'sub-national\" data fields grouped limited via API, although fields available web application. See https://wonder.cdc.gov/wonder/help/WONDER-API.html information.","code":""},{"path":"/reference/getData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request data from the CDC Wonder API — getData","text":"","code":"mylist <- list(   list(\"Group Results By\", \"Race\"),   list(\"Tobacco Use\", \"1\")    # yes )  mydata <- getData(\"D66\", mylist) #> No encoding supplied: defaulting to UTF-8. #> Message from query: #> Any by-variables picked from {0} need to appear in the order listed, and other by-variables can't come between them. #> Error in getData(\"D66\", mylist): Internal Server Error (HTTP 500). mydata #> Error in eval(expr, envir, enclos): object 'mydata' not found"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"/reference/send_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Send XML query — send_query","title":"Send XML query — send_query","text":"Based https://github.com/hrbrmstr/wondr/blob/master/R/wondr.r","code":""},{"path":"/reference/send_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send XML query — send_query","text":"","code":"send_query(filename, database_id = NULL)"},{"path":"/reference/send_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send XML query — send_query","text":"filename .xml query list database_id CDC WONDER database ID, NULL parsed filename","code":""},{"path":"/reference/send_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send XML query — send_query","text":"","code":"if (FALSE) {    send_query(\"data-raw/D66_Defaults.xml\") }"},{"path":"/reference/show_databases.html","id":null,"dir":"Reference","previous_headings":"","what":"Show available databases — show_databases","title":"Show available databases — show_databases","text":"displays available databases (also available : ADD LINK GITHUB)","code":""},{"path":"/reference/show_databases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show available databases — show_databases","text":"","code":"show_databases()"},{"path":"/reference/show_databases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show available databases — show_databases","text":"","code":"show_databases() #> # A tibble: 7 × 2 #>   label                               name  #>   <chr>                               <chr> #> 1 Natality for 1995 - 2002            D10   #> 2 Natality for 2003 - 2006            D27   #> 3 Natality for 2007 - 2020            D66   #> 4 Natality for 2016 - 2020 (expanded) D149  #> 5 Detailed Mortality                  D76   #> 6 Provisional Multiple Cause of Death D176  #> 7 Heat Wave Days                      D104"},{"path":"/reference/wonderapi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"wonderapi — wonderapi-package","title":"wonderapi — wonderapi-package","text":"provides easy access CDC wonder data primarily sociological topics. leverages wondr package's  general approach make specific human readable set functions build queries, retrieve data,  prepare data either reports analysis.","code":""}]
